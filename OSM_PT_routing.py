# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OSMroutingPT
                                 A QGIS plugin
 It create the Public Transports path for each PT with a CSV table with stops sequence and coordinate
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Luigi Dal B./FlowRide
        email                : luigi.dalbosco@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (QgsProperty, 
                       QgsVectorLayer, 
                       QgsField, 
                       QgsProject, 
                       edit, 
                       QgsExpression, 
                       QgsExpressionContext, 
                       QgsExpressionContextUtils,
                       QgsCoordinateReferenceSystem, 
                       QgsVectorFileWriter, 
                       QgsProcessingFeatureSourceDefinition,
                       QgsFeatureRequest
)
from qgis import processing
import os.path
import pandas as pd

# Initialize Qt resources from file resources.py
from .resources import *

# import functions from core_function.py
from .core_function import create_minitrips, mini_routing, trips, save_and_stop_editing_layers

# Import the code for the dialog
from .OSM_PT_routing_dialog import OSMroutingPTDialog
import os.path

class OSMroutingPT:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        self.OSMPTrouting_dialog = OSMroutingPTDialog()

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OSMroutingPT_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Ruting OSM Public Transport')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OSMroutingPT', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/OSM_PT_routing/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'2. Routing OSM Public Transports'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Ruting OSM Public Transport'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
       
       
        # show the dialog
        self.OSMPTrouting_dialog.show()
        # Run the dialog event loop
        result = self.OSMPTrouting_dialog.exec_()

        # load the downloads and output folders
        dwnldfld = self.OSMPTrouting_dialog.DownloadQgsFolderWidget.filePath()

        outputspath = self.OSMPTrouting_dialog.OutPutQgsFolderWidget.filePath()


        # See if OK was pressed
        if result:
            
            all_layers = QgsProject.instance().mapLayers().values()
            save_and_stop_editing_layers(all_layers)


            temp_folder = 'OSM_data'
            road_temp_folder = os.path.join(dwnldfld,temp_folder)

            full_roads_name = 'full_city_roads'
            full_roads_gpgk = str(road_temp_folder)+'/'+str(full_roads_name)+'.gpkg'

            tram_rails_name = 'OSM_tram'
            tram_rails_gpgk = str(road_temp_folder)+'/'+str(tram_rails_name)+'.gpkg'
            
            OSM_Regtrain_name = 'OSM_Regtrain'
            OSM_Regtrain_gpkg = str(road_temp_folder)+'/'+str(OSM_Regtrain_name)+'.gpkg'

            OSM_funicular_name = 'OSM_funicular'
            OSM_funicular_gpkg = str(road_temp_folder)+'/'+str(OSM_funicular_name)+'.gpkg'
            
            tempfolder = 'temp/temp_OSM_forrouting'
            temp_OSM_for_routing = os.path.join (dwnldfld,tempfolder)

            OSM4rout_name = 'OSM4routing'
            OSM4rout_gpkg = str(outputspath)+'/'+str(OSM4rout_name)+'.gpkg'
            OSM4rout_csv= str(outputspath)+'/'+str(OSM4rout_name)+'.csv'

            OSM4routing_name = 'OSM4routing_XYminiTrips'
            OSM4routing_csv = str(outputspath)+'/'+str(OSM4routing_name)+'.csv'

            lines_trips_csv =  str(dwnldfld)+'/lines_trips.csv'
            
            shapes_txt = os.path.join(dwnldfld,'shapes.txt')

            trnsprt_shapes = str(outputspath)+'/mini_shapes.gpkg'

            tempfolder = 'temp/mini-trips'
            temp_folder_minitrip = os.path.join (dwnldfld,tempfolder)

            tempfolder = 'temp/lines_trips'
            temp_folder_linestrip= os.path.join (dwnldfld,tempfolder)

            name_folder = 'shapes'
            shape_folder = os.path.join(outputspath,name_folder)

            trips_done_name = 'trips_done'
            trips_done_csv = str(temp_folder_linestrip)+'/'+str(trips_done_name)+'.csv'

            if not os.path.exists(shape_folder):
                os.makedirs(shape_folder)
            if not os.path.exists(temp_folder_minitrip):
                os.makedirs(temp_folder_minitrip)
            if not os.path.exists(temp_folder_linestrip):
                os.makedirs(temp_folder_linestrip)

            # loading the temporary tables and outpust of OSMtocheck Plugin

            ls_files = os.listdir(temp_OSM_for_routing)
            ls_gpkg_to_run = [file for file in ls_files if ".gpkg" in file]


            # to avoid make twice the routing, because the process is time demanding 
            if os.path.exists(trips_done_csv):
                gpkg_done_df = pd.read_csv(trips_done_csv)
                ls_gpkg_done = list(gpkg_done_df.lines_draw_gpkg.unique())
                ls_to_do = [gpkg for gpkg in ls_gpkg_to_run if gpkg not in ls_gpkg_done ] 
            else:
                ls_to_do = ls_gpkg_to_run

            ls_gpkg_df = pd.DataFrame(ls_gpkg_to_run).rename(columns={0:'lines_draw_gpkg'})
            if os.path.exists(trips_done_csv):
                os.remove(trips_done_csv)
            ls_gpkg_df.to_csv(trips_done_csv,index=False)

            # merging the layer to route
            layers_to_route = []
            for to_do in ls_to_do:
                layers_to_route.append(str(temp_OSM_for_routing)+'/'+str(to_do))

            params = {'LAYERS':layers_to_route,
                        'CRS':QgsCoordinateReferenceSystem('EPSG:4326'),
                        'OUTPUT':OSM4rout_gpkg}
            processing.run("native:mergevectorlayers",params)
            
            # recalculate the coordinates of the stop position changed
            OSM4rout_layer = QgsVectorLayer(OSM4rout_gpkg,OSM4rout_name,"ogr")
            ls_fields_name_to_remove = ['lon','lat']

            for field_name in ls_fields_name_to_remove:
                field_index = OSM4rout_layer.fields().indexFromName(field_name)
                
                if field_index != -1:
                    OSM4rout_layer.startEditing()
                    OSM4rout_layer.deleteAttribute(field_index)
                    OSM4rout_layer.commitChanges()
                else:
                    print(f"Field '{field_name}' not found.")
            
            pr = OSM4rout_layer.dataProvider()
            pr.addAttributes([
                            QgsField("lon", QVariant.Double),
                            QgsField("lat", QVariant.Double)])
            OSM4rout_layer.updateFields()
            
            expression2 = QgsExpression('$x')
            expression3 = QgsExpression('$y')

            context = QgsExpressionContext()
            context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(OSM4rout_layer))

            with edit(OSM4rout_layer):
                for f in OSM4rout_layer.getFeatures():
                    context.setFeature(f)
                    f['lon'] = expression2.evaluate(context)
                    f['lat'] = expression3.evaluate(context)
                    OSM4rout_layer.updateFeature(f)
            OSM4rout_layer.commitChanges()

            os.remove(OSM4rout_csv)
            QgsVectorFileWriter.writeAsVectorFormat(OSM4rout_layer,OSM4rout_csv,"utf-8",driverName = "CSV")

            # create mini trips
            create_minitrips(OSM4rout_csv,OSM4routing_csv, lines_trips_csv)

            # routing
            mini_routing(OSM4routing_csv,full_roads_gpgk, tram_rails_gpgk, OSM_Regtrain_gpkg, OSM_funicular_gpkg, temp_folder_minitrip, trnsprt_shapes)
            
            lines_trips = pd.read_csv(lines_trips_csv)
  
            idx = 0
            while idx < len(lines_trips):
                trip = str(lines_trips.loc[idx,'line_trip'])
                trip_gpkg = str(outputspath)+'/'+ str(trip)+'.gpkg'
                trip_csv = str(outputspath)+'/'+ str(trip)+'.csv'
                lines_trips.loc[idx,'gpkg'] = trip_gpkg
                lines_trips.loc[idx,'csv'] = trip_csv
                trips(trnsprt_shapes,trip,trip_gpkg, trip_csv)
                
                if not QgsProject.instance().mapLayersByName(str(trip)):
                    trip_layer = QgsVectorLayer(trip_gpkg,trip,"ogr")
                    QgsProject.instance().addMapLayer(trip_layer)
                idx +=1

            os.remove(lines_trips_csv)
            lines_trips.to_csv(lines_trips_csv, index=False)
